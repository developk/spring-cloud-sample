
buildscript {
    ext {
        springBootVersion = '2.5.2'
        dependencyManagementVersion = '1.0.11.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementVersion"
        classpath "io.freefair.gradle:lombok-plugin:6.1.0"
    }
}

// 전체 종속 프로젝트들에 대한 설정 내용.
subprojects {

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://nexus.gndbiz.com/repository/maven-public/'
            credentials {
                username 'consumer'
                password 'gndbiz!@#'
            }
        }
    }

    // modules라는 경로는 단지 디렉토리일 뿐이므로 설정내용 적용 제외
    if (project.name.equalsIgnoreCase("modules")) {
        return false
    }

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'java'

    group 'com.gndbiz'

    sourceCompatibility = '16'
    targetCompatibility = '16'

    ext {
        springCloudVersion = '2020.0.3'
    }

    compileJava.options.encoding = 'UTF-8'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
        }
    }

    test {
        useJUnitPlatform()
    }

}

// Spring Cloud Config Store Server
project(':config-store') {

    version '1.0'

    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-config-server'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
        implementation 'org.springframework.cloud:spring-cloud-config-monitor'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    }

    bootRun {
        jvmArgs = ["-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"]
    }

}

// Spring Cloud Eureka Endpoint Discovery Server
project(':discovery') {

    version '1.0'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    }

    bootRun {
        jvmArgs = ["-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"]
    }
}

// Spring Cloud Gateway Router Server
project(':gateway') {

    version '1.0'

    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.5.10'


    }

    bootRun {
        jvmArgs = ["-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"]
    }
}

// Common Module for Microservices
project('modules:module-core') {

    configurations.implementation {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-actuator'
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

        implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

        implementation 'org.glassfish.jaxb:jaxb-runtime:3.0.2'
        implementation 'org.springframework.cloud:spring-cloud-starter-oauth2:2.2.5.RELEASE'

        implementation 'org.mapstruct:mapstruct:1.4.2.Final'

        implementation 'org.springdoc:springdoc-openapi-ui:1.5.10'
        implementation 'org.springdoc:springdoc-openapi-security:1.5.10'

        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
        implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'

        implementation 'com.gndbiz:excel-writer:0.0.2-SNAPSHOT'
        implementation 'com.gndbiz:common-utils:0.0.6-SNAPSHOT'

        runtimeOnly 'mysql:mysql-connector-java:8.0.25'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
        }
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}

// Microservice (API)
project('modules:module-auth') {

    version '1.0'

    dependencies {


        // 공용 모듈 참조
        implementation project(path: ':modules:module-core', configuration: 'default')

        implementation 'org.springframework.cloud:spring-cloud-starter-security:2.2.5.RELEASE'
        implementation 'org.springframework.security:spring-security-jwt:1.1.1.RELEASE'

    }

    bootRun {
        jvmArgs = ["-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"]
    }
}

// Microservice (API)
project('modules:module-user') {

    version '0.0.1-SNAPSHOT'

    dependencies {
        // 공용 모듈 참조
        implementation project(path: ':modules:module-core', configuration: 'default')

    }

    bootRun {
        jvmArgs = ["-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"]
    }
}

project('modules:module-company') {

    version '0.0.1-SNAPSHOT'

    dependencies {
        // 공용 모듈 참조
        implementation project(path: ':modules:module-core', configuration: 'default')

    }

    bootRun {
        jvmArgs = ["-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"]
    }
}